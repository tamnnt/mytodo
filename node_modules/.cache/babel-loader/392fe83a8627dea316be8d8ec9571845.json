{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\THANHTAM\\\\OneDrive - Hochiminh City University of Education\\\\Workspace\\\\vscode\\\\ReactJS\\\\Todo-NMC\\\\todos_timeline\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-self-compare */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable array-callback-return */\n\n/* eslint-disable eqeqeq */\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import lib\n\nimport 'react-confirm-alert/src/react-confirm-alert.css'; //Import CSS\n\nimport ToDoList from \"./component/TodoList\";\nimport ToDoForm from \"./component/TodoForm\";\nimport storage from './util/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [toDoList, setToDoList] = useState(storage.get()); // Xử lý công việc đã hoàn thành\n\n  const handleToggle = id => {\n    let mapper = toDoList.map(task => {\n      return task.id === Number(id) ? { ...task,\n        complete: !task.complete\n      } : { ...task\n      };\n    });\n    setToDoList(mapper);\n    storage.set(mapper);\n  }; // Lọc ra để xóa những công việc đã hoàn thành\n\n\n  const handleFilter = () => {\n    let notComplete = [];\n    toDoList.filter(task => {\n      if (task.complete) {\n        notComplete.push(task.complete);\n      }\n    });\n\n    if (notComplete.length > 0) {\n      confirmAlert({\n        title: 'Thông báo',\n        message: 'Hành động này không thể khôi phục. Bạn có chắn chắn muốn xóa những việc đã hoàn thành?',\n        buttons: [{\n          label: 'Yes',\n          onClick: () => {\n            let filtered = toDoList.filter(task => {\n              return !task.complete;\n            });\n            setToDoList(filtered);\n            storage.set(filtered);\n          }\n        }, {\n          label: 'No'\n        }]\n      });\n    } else {\n      confirmAlert({\n        title: 'Thông báo',\n        message: 'Chưa có nhiệm vụ nào hoàn thành',\n        buttons: [{\n          label: 'Yes',\n          onClick: () => {\n            return;\n          }\n        }]\n      });\n    }\n  }; // Thêm công việc\n\n\n  const addTask = (userInput, due) => {\n    let copy = [...toDoList];\n    let maxId = Math.max(...copy.map(task => task.id));\n    copy = [...copy, {\n      id: maxId + 1,\n      task: userInput,\n      complete: false,\n      dateOf: due\n    }];\n    setToDoList(copy);\n    storage.set(copy);\n  }; // Xóa task item\n\n\n  const handleDelete = id => {\n    let del = toDoList.filter(todo => todo.id != id);\n    setToDoList(del);\n    storage.set(del);\n  };\n\n  const startUpdate = todo => {\n    document.getElementById(\"task\").value = todo.task;\n    document.getElementById(\"due\").value = todo.dateOf;\n  }; // Chỉnh sửa task item\n\n\n  const endUpdate = (todo, id) => {\n    let task = document.getElementById(\"task\").value;\n    let due = document.getElementById(\"due\").value;\n\n    if (task && due && todo.id == todo.id) {\n      let copy = [...toDoList];\n      todo.task = task;\n      todo.dateOf = due;\n      setToDoList(copy);\n      storage.set(copy);\n    } else {\n      confirmAlert({\n        title: 'Thông báo',\n        message: 'Kiểm tra lại dữ liệu (task, due and index) đã được chọn hay chưa hoặc thông tin đã điền đầy đủ hay chưa?',\n        buttons: [{\n          label: 'Yes',\n          onClick: () => {\n            return;\n          }\n        }]\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-h1\",\n        children: \" Todos List \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ToDoForm, {\n          addTask: addTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n          toDoList: toDoList,\n          handleToggle: handleToggle,\n          handleFilter: handleFilter,\n          handleDelete: handleDelete,\n          startUpdate: startUpdate,\n          endUpdate: endUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"TOme7G1FGNWu98dzZE+l5q6IstE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/THANHTAM/OneDrive - Hochiminh City University of Education/Workspace/vscode/ReactJS/Todo-NMC/todos_timeline/src/App.js"],"names":["React","useState","confirmAlert","ToDoList","ToDoForm","storage","App","toDoList","setToDoList","get","handleToggle","id","mapper","map","task","Number","complete","set","handleFilter","notComplete","filter","push","length","title","message","buttons","label","onClick","filtered","addTask","userInput","due","copy","maxId","Math","max","dateOf","handleDelete","del","todo","startUpdate","document","getElementById","value","endUpdate"],"mappings":"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","sourcesContent":["/* eslint-disable no-self-compare */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable eqeqeq */\r\nimport React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import lib\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; //Import CSS\r\nimport ToDoList from \"./component/TodoList\";\r\nimport ToDoForm from \"./component/TodoForm\";\r\nimport storage from './util/storage'\r\n\r\nfunction App() {\r\n  const [toDoList, setToDoList] = useState(storage.get());\r\n  // Xử lý công việc đã hoàn thành\r\n  const handleToggle = (id) => {\r\n    let mapper = toDoList.map((task) => {\r\n      return task.id === Number(id)\r\n        ? { ...task, complete: !task.complete }\r\n        : { ...task };\r\n    });\r\n    setToDoList(mapper);\r\n    storage.set(mapper);\r\n  };\r\n  // Lọc ra để xóa những công việc đã hoàn thành\r\n  const handleFilter = () => {\r\n    let notComplete = [];\r\n    toDoList.filter((task) => {\r\n      if(task.complete){\r\n        notComplete.push(task.complete);\r\n      }\r\n    })\r\n    if(notComplete.length > 0){\r\n      confirmAlert({\r\n        title: 'Thông báo',\r\n        message: 'Hành động này không thể khôi phục. Bạn có chắn chắn muốn xóa những việc đã hoàn thành?',\r\n        buttons: [\r\n            {\r\n            label: 'Yes',\r\n            onClick: () => {\r\n                let filtered = toDoList.filter((task) => {\r\n                  return !task.complete;\r\n                });\r\n                setToDoList(filtered);\r\n                storage.set(filtered);\r\n              }\r\n            },\r\n            {\r\n            label: 'No',\r\n            }]\r\n      });\r\n    }else{\r\n      confirmAlert({\r\n        title: 'Thông báo',\r\n        message: 'Chưa có nhiệm vụ nào hoàn thành',\r\n        buttons: [\r\n            {\r\n            label: 'Yes',\r\n            onClick: () => {return;}\r\n            },]\r\n      });\r\n    }\r\n  };\r\n  // Thêm công việc\r\n  const addTask = (userInput, due) => {\r\n    let copy = [...toDoList];\r\n    let maxId = Math.max(...copy.map((task) => task.id));\r\n    copy = [\r\n      ...copy,\r\n      { id: maxId + 1, task: userInput, complete: false, dateOf: due },\r\n    ];\r\n    setToDoList(copy);\r\n    storage.set(copy);\r\n  };\r\n  // Xóa task item\r\n  const handleDelete = (id)=>{\r\n    let del = toDoList.filter(todo => todo.id != id);\r\n    setToDoList(del);\r\n    storage.set(del);\r\n  }\r\n  const startUpdate = (todo) => {\r\n    document.getElementById(\"task\").value = todo.task;\r\n    document.getElementById(\"due\").value = todo.dateOf;\r\n  }\r\n  // Chỉnh sửa task item\r\n  const endUpdate = (todo,id) => {\r\n      let task = document.getElementById(\"task\").value;\r\n      let due = document.getElementById(\"due\").value;\r\n      if(task && due && todo.id == todo.id){\r\n        let copy = [...toDoList]\r\n        todo.task = task;\r\n        todo.dateOf = due;\r\n        setToDoList(copy);\r\n        storage.set(copy);\r\n      }else{\r\n        confirmAlert({\r\n          title: 'Thông báo',\r\n          message: 'Kiểm tra lại dữ liệu (task, due and index) đã được chọn hay chưa hoặc thông tin đã điền đầy đủ hay chưa?',\r\n          buttons: [\r\n              {\r\n              label: 'Yes',\r\n              onClick: () => {return;}\r\n              },\r\n          ]\r\n      });\r\n      }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1 className=\"app-h1\"> Todos List </h1>\r\n        <div>\r\n          <ToDoForm addTask={addTask} />\r\n          <ToDoList\r\n            toDoList={toDoList}\r\n            handleToggle={handleToggle}\r\n            handleFilter={handleFilter}\r\n            handleDelete={handleDelete}\r\n            startUpdate={startUpdate}\r\n            endUpdate={endUpdate}\r\n          />\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}